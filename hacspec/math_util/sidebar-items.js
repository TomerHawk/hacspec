initSidebarItems({"fn":[["R","makes poly to an element of R_modulo \\ irr"],["add_poly","Polynomial Addition, calculates a + b mod modulo"],["cadd","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["cmul","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["convert_u128_to_i128","Convert Seq to Seq"],["cset_bit","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["csub","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["cswap","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["cswap_bit","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["ct_div","Library function that is part of the language but implemented only with primitives and other library functions. As such, it does not need to be formalized as a primitive."],["deg","returns degree of polynomial, e.g. for  3x² + 2x + 1 -> 2"],["eea","Extended Euclidean Algorithm on Seq which returns the inverse of a in R_modulo \\ irr. if a has no inverse in R_modulo \\ irr, returns Err(string)"],["euclidean_division","euclidean polynomial division, calculates a/ b in R_modulo returns fixed size polynomial ( size is p)"],["extended_euclid","Constant-time extended euclidean algorithm to compute the inverse of x in yℤ[x] x.len() and degree of y are assumed to be public See recipx in Figure 6.1 of https://eprint.iacr.org/2019/266"],["leading_coef","returns coefficient of the highest degree, e.g. for  3x² + 2x + 1 -> 3"],["make_positive","makes coefficients positiv, e.g. -3 mod 4 = 1"],["mul_poly","simple polynomial multiplication for two fixed size polynomials O(n²) with a * b mod modulo Assumption: Degree of a * b < Size of a"],["mul_poly_irr","polynomial multiplication of two size fixed polynomials in R_modulo \\ irr"],["mul_poly_naive","simple schoolbook polynomial multiplication with sparse and all coefficients mod modulo"],["poly_add",""],["poly_div","Euclidean algorithm to compute quotient `q` and remainder `r` of x/y. The length of x and degree of y are assumed to be public"],["poly_mul","Polynomial multiplication using sparse multiplication. This can be more efficient than operand scanning but also prone to side-channel attacks."],["poly_sub",""],["sub_poly","polynomial subtraction, calculates a - b mod modulo"],["weight","returns number of coefficient != 0, e.g. for  -3x⁵ + 3x² + 2x + 1 -> 4"]]});