use hacspec::prelude::*;

use hacspec_examples::ntru_prime::*;
#[macro_use]
extern crate hacspec_examples;

#[test]
fn test_create_inv() {
    let mut poly = create_invertable_poly(&ntru_v!(1), ntru_v!(1).q);
    let mut f_inv: Seq<i128> = Seq::new(ntru_v!(1).p + 1);
    for _ in 0..4 {
        match poly.1 {
            Ok(v) => {
                f_inv = v;
                break;
            }
            Err(_) => poly = create_invertable_poly(&ntru_v!(1), ntru_v!(1).q),
        }
    }

    let result = mul_poly_irr(&f_inv,&poly.0,&(ntru_v!(1).irr),ntru_v!(1).q);
    assert_eq!(deg(&result),0);
    if result[0] != 1 as i128{
        panic!("Didn't work!");
    }
}

#[test]
fn test_round(){
    let test:Seq<i128> = Seq::from_native_slice(&[2564, 1471, 840, 4242, 2672, 3450, 3239, 2323, 826, 532, 1583, 4387, 3452, 999, 957, 4400, 757, 3794, 2460, 2141, 4269, 2477, 3196, 2834, 840, 3303, 3118, 3520, 1027, 1381, 641, 1251, 4560, 2679, 3302, 709, 3490, 1070, 1147, 2658, 251, 350, 12, 986, 2708, 4295, 267, 3821, 3719, 718, 2, 3697, 1191, 1610, 216, 1239, 878, 1605, 4488, 597, 1448, 4546, 2898, 4175, 34, 390, 4204, 2435, 922, 4546, 4538, 1838, 2192, 2868, 2994, 2592, 1672, 3933, 4194, 3441, 1038, 4521, 3758, 4114, 4556, 2046, 1550, 3289, 1808, 4589, 1592, 1103, 1506, 3973, 1764, 1198, 2802, 2633, 3829, 3256, 347, 3418, 2255, 3799, 1524, 680, 402, 2298, 335, 1328, 2954, 2447, 4056, 3293, 3896, 2200, 2673, 2317, 2005, 2159, 2053, 3829, 1390, 467, 2283, 2054, 2264, 4563, 1925, 4433, 1156, 333, 315, 1102, 3374, 4335, 72, 411, 2081, 2726, 1642, 3537, 3141, 321, 3, 2371, 3358, 891, 4205, 283, 4424, 145, 215, 746, 1624, 1442, 522, 3341, 524, 2734, 2586, 1414, 1787, 3805, 2108, 3383, 2481, 1516, 2830, 3955, 1473, 863, 892, 4099, 2126, 2557, 1625, 116, 4407, 2496, 1808, 1443, 2959, 3461, 3581, 3666, 3916, 299, 1596, 4430, 2686, 720, 4296, 2557, 3060, 2902, 890, 2456, 1958, 4354, 3425, 840, 3237, 3324, 837, 1493, 1502, 3847, 2207, 811, 4132, 102, 2265, 798, 4314, 2743, 3434, 3453, 2510, 683, 596, 3735, 1144, 1301, 3690, 1792, 1901, 533, 84, 584, 3559, 1340, 915, 790, 634, 1954, 3919, 1340, 1890, 231, 96, 2561, 1423, 4313, 1328, 86, 221, 1276, 2519, 2177, 4520, 1576, 204, 4343, 1070, 4380, 4446, 2943, 1460, 1384, 1945, 2032, 438, 2989, 695, 1239, 2081, 784, 3839, 1561, 4041, 3224, 3654, 2661, 140, 1472, 595, 564, 259, 3455, 3483, 24, 724, 3361, 2506, 4247, 683, 2551, 2133, 3659, 1165, 2090, 3718, 3760, 2713, 4434, 3253, 4022, 1231, 3150, 4288, 3667, 1384, 1629, 1886, 1173, 2787, 342, 3746, 4047, 4018, 2343, 3299, 1841, 3583, 2124, 855, 640, 3534, 691, 3670, 2867, 502, 1329, 3545, 1908, 3815, 1640, 3712, 3069, 4016, 2045, 2760, 1868, 4555, 1260, 3497, 3451, 2832, 3942, 1178, 158, 2755, 2288, 134, 2597, 1635, 2494, 325, 3893, 1338, 452, 1651, 2148, 1148, 4021, 2934, 4132, 2351, 3510, 3285, 385, 2540, 3561, 3896, 609, 1578, 1189, 2752, 4063, 358, 968, 3358, 1839, 2547, 1947, 3952, 3461, 3608, 3702, 4348, 1070, 1645, 3345, 3810, 1768, 4585, 3886, 214, 2225, 2034, 2448, 3745, 2908, 391, 2264, 821, 1762, 3470, 2443, 2166, 548, 1937, 1869, 473, 2969, 606, 2249, 1337, 2305, 373, 979, 3277, 29, 4485, 3517, 4011, 3360, 4228, 646, 1355, 3530, 1473, 1745, 3549, 3018, 3220, 1941, 1299, 2231, 116, 4489, 418, 1551, 3882, 1912, 1120, 3450, 3283, 114, 2859, 4376, 2910, 2816, 534, 3307, 618, 2117, 4560, 4167, 1200, 3846, 3823, 2762, 2678, 1325, 3197, 2950, 3157, 671, 2059, 2542, 2605, 34, 2012, 4006, 1163, 1196, 3963, 225, 1757, 2779, 4200, 319, 258, 1588, 2784, 422, 1391, 697, 3434, 2694, 3934, 2226, 3895, 1143, 1505, 615, 3621, 1282, 4557, 1237, 960, 3379, 4540, 1560, 138, 768, 3023, 2542, 2481, 1559, 3570, 472, 2187, 2375, 3334, 3411, 2753, 2623, 3067, 2163, 346, 3410, 978, 1442, 2760, 2853, 840, 4417, 1348, 3236, 3871, 2802, 4074, 2588, 857, 4295, 695, 841, 2887, 1451, 3152, 166, 3026, 3158, 4215, 3527, 3071, 1992, 3225, 1966, 1569, 3516, 3904, 894, 3714, 4135, 4388, 3127, 4005, 668, 2927, 487, 1005, 3333, 1177, 4180, 1173, 2294, 1444, 1346, 2852, 2935, 2022, 509, 3464, 3310, 4408, 2230, 2908, 1938, 989, 4296, 3512, 1485, 2842, 3085, 4305, 3411, 1042, 457, 2588, 2183, 4127, 2989, 486, 3057, 1420, 1801, 71, 2955, 1134, 2020, 3895, 1000, 3648, 1374, 2898, 3808, 717, 2306, 2678, 4402, 4319, 2035, 2574, 2765, 2465, 2373, 1446, 998, 83, 3748, 4526, 2760, 4242, 1569, 3237, 2465, 4073, 4283, 3035, 2297, 1300, 1827, 4244, 3530, 1802, 3521, 3672, 3959, 3318, 2440, 4138, 2789, 4056, 1762, 1100, 1223, 3426, 3247, 1547, 1373, 1554, 3969, 4039, 4497, 1328, 3949, 1017, 2435, 998, 3470, 4071, 2956, 4477, 1669, 811, 3474, 3521, 4021, 601, 1051, 3299, 833, 2197, 4150, 454, 2475, 2781, 39, 2108, 4283, 4403, 1793, 3749, 3176, 27, 17, 3936, 1641, 3917, 1802, 2391, 2041, 1889, 3851, 2573, 2053, 1504, 3365, 640, 292, 3159, 372, 1816, 424, 3018, 1075, 4123, 1132, 2611, 703, 149, 748, 965, 2079, 894, 1437, 451, 4222, 1656, 1724, 2129, 939, 2120, 1840, 1355, 3908, 1838, 1528, 4198, 3443, 4077, 4516, 1779, 3975, 4098, 1223, 1330, 452, 893, 2434, 2024, 1534, 1552, 2455, 374, 2549, 848, 324, 871, 3171, 3995, 927, 3420, 203, 941, 4205, 4532, 3366, 3055, 2332, 3324, 4340, 2062, 1641, 2582, 3860, 3697,0]
);
    let target:Seq<i128> = Seq::from_native_slice(&[-2028, 1470, 840, -348, -1920, -1140, -1353, -2268, 825, 531, 1584, -204, -1140, 999, 957, -192, 756, -798, -2130, 2142, -321, -2115, -1395, -1758, 840, -1287, -1473, -1071, 1026, 1380, 642, 1251, -30, -1911, -1290, 708, -1101, 1071, 1146, -1932, 252, 351, 12, 987, -1884, -297, 267, -771, -873, 717, 3, -894, 1191, 1611, 216, 1239, 879, 1605, -102, 597, 1449, -45, -1692, -417, 33, 390, -387, -2157, 921, -45, -54, 1839, 2193, -1722, -1596, -1998, 1671, -657, -396, -1149, 1038, -69, -834, -477, -36, 2046, 1551, -1302, 1809, -3, 1593, 1104, 1506, -618, 1764, 1197, -1788, -1959, -762, -1335, 348, -1173, 2256, -792, 1524, 681, 402, -2292, 336, 1329, -1638, -2145, -534, -1299, -696, 2199, -1917, -2274, 2004, 2160, 2052, -762, 1389, 468, 2283, 2055, 2265, -27, 1926, -159, 1155, 333, 315, 1101, -1218, -255, 72, 411, 2082, -1866, 1641, -1053, -1449, 321, 3, -2220, -1233, 891, -387, 282, -168, 144, 216, 747, 1623, 1443, 522, -1251, 525, -1857, -2004, 1413, 1788, -786, 2109, -1209, -2109, 1515, -1761, -636, 1473, 864, 891, -492, 2127, -2034, 1626, 117, -183, -2094, 1809, 1443, -1632, -1131, -1011, -924, -675, 300, 1596, -162, -1905, 720, -294, -2034, -1530, -1689, 891, -2136, 1959, -237, -1167, 840, -1353, -1266, 837, 1494, 1503, -744, 2208, 810, -459, 102, 2265, 798, -276, -1848, -1158, -1137, -2082, 684, 597, -855, 1143, 1302, -900, 1791, 1902, 534, 84, 585, -1032, 1341, 915, 789, 633, 1953, -672, 1341, 1890, 231, 96, -2031, 1422, -279, 1329, 87, 222, 1275, -2073, 2178, -72, 1575, 204, -249, 1071, -210, -144, -1647, 1461, 1383, 1944, 2031, 438, -1602, 696, 1239, 2082, 783, -753, 1560, -549, -1368, -936, -1929, 141, 1473, 594, 564, 258, -1137, -1107, 24, 723, -1230, -2085, -345, 684, -2040, 2133, -933, 1164, 2091, -873, -831, -1878, -156, -1338, -570, 1230, -1440, -303, -924, 1383, 1629, 1887, 1173, -1803, 342, -846, -543, -573, -2247, -1293, 1842, -1008, 2124, 855, 639, -1056, 690, -921, -1725, 501, 1329, -1047, 1908, -777, 1641, -879, -1521, -576, 2046, -1830, 1869, -36, 1260, -1095, -1140, -1758, -648, 1179, 159, -1836, 2289, 135, -1995, 1635, -2097, 324, -699, 1338, 453, 1650, 2148, 1149, -570, -1656, -459, -2241, -1080, -1305, 384, -2052, -1029, -696, 609, 1578, 1188, -1839, -528, 357, 969, -1233, 1839, -2043, 1947, -639, -1131, -984, -888, -243, 1071, 1644, -1245, -780, 1767, -6, -705, 213, 2226, 2034, -2142, -846, -1683, 390, 2265, 822, 1761, -1122, -2148, 2166, 549, 1938, 1869, 474, -1623, 606, 2250, 1338, -2286, 372, 978, -1314, 30, -105, -1074, -579, -1230, -363, 645, 1356, -1062, 1473, 1746, -1041, -1572, -1371, 1941, 1299, 2232, 117, -102, 417, 1551, -708, 1911, 1119, -1140, -1308, 114, -1731, -216, -1680, -1776, 534, -1284, 618, 2118, -30, -423, 1200, -744, -768, -1830, -1914, 1326, -1395, -1641, -1434, 672, 2058, -2049, -1986, 33, 2013, -585, 1164, 1197, -627, 225, 1758, -1812, -390, 318, 258, 1587, -1806, 423, 1392, 696, -1158, -1896, -657, 2226, -696, 1143, 1506, 615, -969, 1281, -33, 1236, 960, -1212, -51, 1560, 138, 768, -1569, -2049, -2109, 1560, -1020, 471, 2187, -2217, -1257, -1179, -1839, -1968, -1524, 2163, 345, -1182, 978, 1443, -1830, -1737, 840, -174, 1347, -1356, -720, -1788, -516, -2004, 858, -297, 696, 840, -1704, 1452, -1440, 165, -1566, -1434, -375, -1065, -1521, 1992, -1365, 1965, 1569, -1074, -687, 894, -876, -456, -204, -1464, -585, 669, -1665, 486, 1005, -1257, 1176, -411, 1173, 2295, 1443, 1347, -1740, -1656, 2022, 510, -1128, -1281, -183, 2229, -1683, 1938, 990, -294, -1080, 1485, -1749, -1506, -285, -1179, 1041, 456, -2004, 2184, -465, -1602, 486, -1533, 1419, 1800, 72, -1635, 1134, 2019, -696, 999, -942, 1374, -1692, -783, 717, -2286, -1914, -189, -273, 2034, -2016, -1827, -2127, -2217, 1446, 999, 84, -843, -66, -1830, -348, 1569, -1353, -2127, -519, -309, -1557, -2295, 1299, 1827, -348, -1062, 1803, -1071, -918, -633, -1272, -2151, -453, -1803, -534, 1761, 1101, 1224, -1164, -1344, 1548, 1374, 1554, -621, -552, -93, 1329, -642, 1017, -2157, 999, -1122, -519, -1635, -114, 1668, 810, -1116, -1071, -570, 600, 1050, -1293, 834, 2196, -441, 453, -2115, -1809, 39, 2109, -309, -189, 1794, -843, -1416, 27, 18, -654, 1641, -675, 1803, -2199, 2040, 1890, -741, -2019, 2052, 1503, -1227, 639, 291, -1431, 372, 1815, 423, -1572, 1074, -468, 1131, -1980, 702, 150, 747, 966, 2079, 894, 1437, 450, -369, 1656, 1725, 2130, 939, 2121, 1839, 1356, -684, 1839, 1527, -393, -1149, -513, -75, 1779, -615, -492, 1224, 1329, 453, 894, -2157, 2025, 1533, 1551, -2136, 375, -2043, 849, 324, 870, -1419, -597, 927, -1170, 204, 942, -387, -60, -1224, -1536, -2259, -1266, -252, 2061, 1641, -2010, -732, -894,0]
);
    assert_eq!(deg(&target),deg(&test));
    assert_eq!(weight(&target),weight(&test));
}
#[test]
fn test_encryption_decryption() {
    let n_v = ntru_v!(0);
    let keys = key_gen(&n_v);
    let pk = keys.0;
    let sk = keys.1;
    // message
    let m = create_rand_poly(n_v.w,n_v.p);
    // encryption
    let c = encryption(&m, pk, &n_v);
    let result = decryption(c, sk, &n_v);
    for i in 0..result.len(){
        if result[i] != m[i]{
            panic!("NTRU prime failed!");
        }
    }
}
