use hacspec::prelude::*;

use hacspec_examples::ntru_prime::*;
#[macro_use]
extern crate hacspec_examples;

#[test]
fn test_create_inv() {
    let mut poly = create_invertable_poly(&ntru_v!(1), ntru_v!(1).q);
    let mut f_inv: Seq<i128> = Seq::new(ntru_v!(1).p + 1);
    for _ in 0..4 {
        match poly.1 {
            Ok(v) => {
                f_inv = v;
                break;
            }
            Err(_) => poly = create_invertable_poly(&ntru_v!(1), ntru_v!(1).q),
        }
    }

    let result = mul_poly_irr(&f_inv,&poly.0,ntru_v!(1).q);
    assert_eq!(deg(&result),0);
    if result[0] != 1 as i128{
        panic!("Didn't work!");
    }
}

#[test]
fn test_round(){
    let test:Seq<i128> = Seq::from_native_slice(&[2564, 1471, 840, 4242, 2672, 3450, 3239, 2323, 826, 532, 1583, 4387, 3452, 999, 957, 4400, 757, 3794, 2460, 2141, 4269, 2477, 3196, 2834, 840, 3303, 3118, 3520, 1027, 1381, 641, 1251, 4560, 2679, 3302, 709, 3490, 1070, 1147, 2658, 251, 350, 12, 986, 2708, 4295, 267, 3821, 3719, 718, 2, 3697, 1191, 1610, 216, 1239, 878, 1605, 4488, 597, 1448, 4546, 2898, 4175, 34, 390, 4204, 2435, 922, 4546, 4538, 1838, 2192, 2868, 2994, 2592, 1672, 3933, 4194, 3441, 1038, 4521, 3758, 4114, 4556, 2046, 1550, 3289, 1808, 4589, 1592, 1103, 1506, 3973, 1764, 1198, 2802, 2633, 3829, 3256, 347, 3418, 2255, 3799, 1524, 680, 402, 2298, 335, 1328, 2954, 2447, 4056, 3293, 3896, 2200, 2673, 2317, 2005, 2159, 2053, 3829, 1390, 467, 2283, 2054, 2264, 4563, 1925, 4433, 1156, 333, 315, 1102, 3374, 4335, 72, 411, 2081, 2726, 1642, 3537, 3141, 321, 3, 2371, 3358, 891, 4205, 283, 4424, 145, 215, 746, 1624, 1442, 522, 3341, 524, 2734, 2586, 1414, 1787, 3805, 2108, 3383, 2481, 1516, 2830, 3955, 1473, 863, 892, 4099, 2126, 2557, 1625, 116, 4407, 2496, 1808, 1443, 2959, 3461, 3581, 3666, 3916, 299, 1596, 4430, 2686, 720, 4296, 2557, 3060, 2902, 890, 2456, 1958, 4354, 3425, 840, 3237, 3324, 837, 1493, 1502, 3847, 2207, 811, 4132, 102, 2265, 798, 4314, 2743, 3434, 3453, 2510, 683, 596, 3735, 1144, 1301, 3690, 1792, 1901, 533, 84, 584, 3559, 1340, 915, 790, 634, 1954, 3919, 1340, 1890, 231, 96, 2561, 1423, 4313, 1328, 86, 221, 1276, 2519, 2177, 4520, 1576, 204, 4343, 1070, 4380, 4446, 2943, 1460, 1384, 1945, 2032, 438, 2989, 695, 1239, 2081, 784, 3839, 1561, 4041, 3224, 3654, 2661, 140, 1472, 595, 564, 259, 3455, 3483, 24, 724, 3361, 2506, 4247, 683, 2551, 2133, 3659, 1165, 2090, 3718, 3760, 2713, 4434, 3253, 4022, 1231, 3150, 4288, 3667, 1384, 1629, 1886, 1173, 2787, 342, 3746, 4047, 4018, 2343, 3299, 1841, 3583, 2124, 855, 640, 3534, 691, 3670, 2867, 502, 1329, 3545, 1908, 3815, 1640, 3712, 3069, 4016, 2045, 2760, 1868, 4555, 1260, 3497, 3451, 2832, 3942, 1178, 158, 2755, 2288, 134, 2597, 1635, 2494, 325, 3893, 1338, 452, 1651, 2148, 1148, 4021, 2934, 4132, 2351, 3510, 3285, 385, 2540, 3561, 3896, 609, 1578, 1189, 2752, 4063, 358, 968, 3358, 1839, 2547, 1947, 3952, 3461, 3608, 3702, 4348, 1070, 1645, 3345, 3810, 1768, 4585, 3886, 214, 2225, 2034, 2448, 3745, 2908, 391, 2264, 821, 1762, 3470, 2443, 2166, 548, 1937, 1869, 473, 2969, 606, 2249, 1337, 2305, 373, 979, 3277, 29, 4485, 3517, 4011, 3360, 4228, 646, 1355, 3530, 1473, 1745, 3549, 3018, 3220, 1941, 1299, 2231, 116, 4489, 418, 1551, 3882, 1912, 1120, 3450, 3283, 114, 2859, 4376, 2910, 2816, 534, 3307, 618, 2117, 4560, 4167, 1200, 3846, 3823, 2762, 2678, 1325, 3197, 2950, 3157, 671, 2059, 2542, 2605, 34, 2012, 4006, 1163, 1196, 3963, 225, 1757, 2779, 4200, 319, 258, 1588, 2784, 422, 1391, 697, 3434, 2694, 3934, 2226, 3895, 1143, 1505, 615, 3621, 1282, 4557, 1237, 960, 3379, 4540, 1560, 138, 768, 3023, 2542, 2481, 1559, 3570, 472, 2187, 2375, 3334, 3411, 2753, 2623, 3067, 2163, 346, 3410, 978, 1442, 2760, 2853, 840, 4417, 1348, 3236, 3871, 2802, 4074, 2588, 857, 4295, 695, 841, 2887, 1451, 3152, 166, 3026, 3158, 4215, 3527, 3071, 1992, 3225, 1966, 1569, 3516, 3904, 894, 3714, 4135, 4388, 3127, 4005, 668, 2927, 487, 1005, 3333, 1177, 4180, 1173, 2294, 1444, 1346, 2852, 2935, 2022, 509, 3464, 3310, 4408, 2230, 2908, 1938, 989, 4296, 3512, 1485, 2842, 3085, 4305, 3411, 1042, 457, 2588, 2183, 4127, 2989, 486, 3057, 1420, 1801, 71, 2955, 1134, 2020, 3895, 1000, 3648, 1374, 2898, 3808, 717, 2306, 2678, 4402, 4319, 2035, 2574, 2765, 2465, 2373, 1446, 998, 83, 3748, 4526, 2760, 4242, 1569, 3237, 2465, 4073, 4283, 3035, 2297, 1300, 1827, 4244, 3530, 1802, 3521, 3672, 3959, 3318, 2440, 4138, 2789, 4056, 1762, 1100, 1223, 3426, 3247, 1547, 1373, 1554, 3969, 4039, 4497, 1328, 3949, 1017, 2435, 998, 3470, 4071, 2956, 4477, 1669, 811, 3474, 3521, 4021, 601, 1051, 3299, 833, 2197, 4150, 454, 2475, 2781, 39, 2108, 4283, 4403, 1793, 3749, 3176, 27, 17, 3936, 1641, 3917, 1802, 2391, 2041, 1889, 3851, 2573, 2053, 1504, 3365, 640, 292, 3159, 372, 1816, 424, 3018, 1075, 4123, 1132, 2611, 703, 149, 748, 965, 2079, 894, 1437, 451, 4222, 1656, 1724, 2129, 939, 2120, 1840, 1355, 3908, 1838, 1528, 4198, 3443, 4077, 4516, 1779, 3975, 4098, 1223, 1330, 452, 893, 2434, 2024, 1534, 1552, 2455, 374, 2549, 848, 324, 871, 3171, 3995, 927, 3420, 203, 941, 4205, 4532, 3366, 3055, 2332, 3324, 4340, 2062, 1641, 2582, 3860, 3697,0]
);
    let target:Seq<i128> = Seq::from_native_slice(&[-2028, 1470, 840, -348, -1920, -1140, -1353, -2268, 825, 531, 1584, -204, -1140, 999, 957, -192, 756, -798, -2130, 2142, -321, -2115, -1395, -1758, 840, -1287, -1473, -1071, 1026, 1380, 642, 1251, -30, -1911, -1290, 708, -1101, 1071, 1146, -1932, 252, 351, 12, 987, -1884, -297, 267, -771, -873, 717, 3, -894, 1191, 1611, 216, 1239, 879, 1605, -102, 597, 1449, -45, -1692, -417, 33, 390, -387, -2157, 921, -45, -54, 1839, 2193, -1722, -1596, -1998, 1671, -657, -396, -1149, 1038, -69, -834, -477, -36, 2046, 1551, -1302, 1809, -3, 1593, 1104, 1506, -618, 1764, 1197, -1788, -1959, -762, -1335, 348, -1173, 2256, -792, 1524, 681, 402, -2292, 336, 1329, -1638, -2145, -534, -1299, -696, 2199, -1917, -2274, 2004, 2160, 2052, -762, 1389, 468, 2283, 2055, 2265, -27, 1926, -159, 1155, 333, 315, 1101, -1218, -255, 72, 411, 2082, -1866, 1641, -1053, -1449, 321, 3, -2220, -1233, 891, -387, 282, -168, 144, 216, 747, 1623, 1443, 522, -1251, 525, -1857, -2004, 1413, 1788, -786, 2109, -1209, -2109, 1515, -1761, -636, 1473, 864, 891, -492, 2127, -2034, 1626, 117, -183, -2094, 1809, 1443, -1632, -1131, -1011, -924, -675, 300, 1596, -162, -1905, 720, -294, -2034, -1530, -1689, 891, -2136, 1959, -237, -1167, 840, -1353, -1266, 837, 1494, 1503, -744, 2208, 810, -459, 102, 2265, 798, -276, -1848, -1158, -1137, -2082, 684, 597, -855, 1143, 1302, -900, 1791, 1902, 534, 84, 585, -1032, 1341, 915, 789, 633, 1953, -672, 1341, 1890, 231, 96, -2031, 1422, -279, 1329, 87, 222, 1275, -2073, 2178, -72, 1575, 204, -249, 1071, -210, -144, -1647, 1461, 1383, 1944, 2031, 438, -1602, 696, 1239, 2082, 783, -753, 1560, -549, -1368, -936, -1929, 141, 1473, 594, 564, 258, -1137, -1107, 24, 723, -1230, -2085, -345, 684, -2040, 2133, -933, 1164, 2091, -873, -831, -1878, -156, -1338, -570, 1230, -1440, -303, -924, 1383, 1629, 1887, 1173, -1803, 342, -846, -543, -573, -2247, -1293, 1842, -1008, 2124, 855, 639, -1056, 690, -921, -1725, 501, 1329, -1047, 1908, -777, 1641, -879, -1521, -576, 2046, -1830, 1869, -36, 1260, -1095, -1140, -1758, -648, 1179, 159, -1836, 2289, 135, -1995, 1635, -2097, 324, -699, 1338, 453, 1650, 2148, 1149, -570, -1656, -459, -2241, -1080, -1305, 384, -2052, -1029, -696, 609, 1578, 1188, -1839, -528, 357, 969, -1233, 1839, -2043, 1947, -639, -1131, -984, -888, -243, 1071, 1644, -1245, -780, 1767, -6, -705, 213, 2226, 2034, -2142, -846, -1683, 390, 2265, 822, 1761, -1122, -2148, 2166, 549, 1938, 1869, 474, -1623, 606, 2250, 1338, -2286, 372, 978, -1314, 30, -105, -1074, -579, -1230, -363, 645, 1356, -1062, 1473, 1746, -1041, -1572, -1371, 1941, 1299, 2232, 117, -102, 417, 1551, -708, 1911, 1119, -1140, -1308, 114, -1731, -216, -1680, -1776, 534, -1284, 618, 2118, -30, -423, 1200, -744, -768, -1830, -1914, 1326, -1395, -1641, -1434, 672, 2058, -2049, -1986, 33, 2013, -585, 1164, 1197, -627, 225, 1758, -1812, -390, 318, 258, 1587, -1806, 423, 1392, 696, -1158, -1896, -657, 2226, -696, 1143, 1506, 615, -969, 1281, -33, 1236, 960, -1212, -51, 1560, 138, 768, -1569, -2049, -2109, 1560, -1020, 471, 2187, -2217, -1257, -1179, -1839, -1968, -1524, 2163, 345, -1182, 978, 1443, -1830, -1737, 840, -174, 1347, -1356, -720, -1788, -516, -2004, 858, -297, 696, 840, -1704, 1452, -1440, 165, -1566, -1434, -375, -1065, -1521, 1992, -1365, 1965, 1569, -1074, -687, 894, -876, -456, -204, -1464, -585, 669, -1665, 486, 1005, -1257, 1176, -411, 1173, 2295, 1443, 1347, -1740, -1656, 2022, 510, -1128, -1281, -183, 2229, -1683, 1938, 990, -294, -1080, 1485, -1749, -1506, -285, -1179, 1041, 456, -2004, 2184, -465, -1602, 486, -1533, 1419, 1800, 72, -1635, 1134, 2019, -696, 999, -942, 1374, -1692, -783, 717, -2286, -1914, -189, -273, 2034, -2016, -1827, -2127, -2217, 1446, 999, 84, -843, -66, -1830, -348, 1569, -1353, -2127, -519, -309, -1557, -2295, 1299, 1827, -348, -1062, 1803, -1071, -918, -633, -1272, -2151, -453, -1803, -534, 1761, 1101, 1224, -1164, -1344, 1548, 1374, 1554, -621, -552, -93, 1329, -642, 1017, -2157, 999, -1122, -519, -1635, -114, 1668, 810, -1116, -1071, -570, 600, 1050, -1293, 834, 2196, -441, 453, -2115, -1809, 39, 2109, -309, -189, 1794, -843, -1416, 27, 18, -654, 1641, -675, 1803, -2199, 2040, 1890, -741, -2019, 2052, 1503, -1227, 639, 291, -1431, 372, 1815, 423, -1572, 1074, -468, 1131, -1980, 702, 150, 747, 966, 2079, 894, 1437, 450, -369, 1656, 1725, 2130, 939, 2121, 1839, 1356, -684, 1839, 1527, -393, -1149, -513, -75, 1779, -615, -492, 1224, 1329, 453, 894, -2157, 2025, 1533, 1551, -2136, 375, -2043, 849, 324, 870, -1419, -597, 927, -1170, 204, 942, -387, -60, -1224, -1536, -2259, -1266, -252, 2061, 1641, -2010, -732, -894,0]
);
    println!("{:?}",round(&test, 3,4591));
    assert_eq!(deg(&target),deg(&test));
    assert_eq!(weight(&target),weight(&test));
}
#[test]
fn test_encryption(){
    let n_v = ntru_v!(0);
    let pk:Seq<i128> = Seq::from_native_slice(&[1804, 1715, 3288, 371, 4455, 1720, 4209, 2799, 1823, 394, 4414, 2850, 3419, 4335, 3414, 2825, 628, 1586, 2286, 3531, 3127, 3159, 1312, 3952, 41, 642, 3846, 1893, 2596, 3662, 911, 4450, 2446, 4526, 3574, 3196, 916, 4196, 3702, 3635, 451, 506, 3092, 134, 2434, 3779, 1448, 113, 1343, 365, 2594, 2963, 3197, 4060, 4126, 2421, 1846, 4062, 3516, 1305, 4488, 2211, 3090, 2093, 2860, 3583, 73, 2553, 4537, 3207, 3277, 4417, 2962, 526, 514, 2544, 303, 1860, 1152, 1850, 3746, 3496, 2268, 4431, 1638, 4343, 867, 2757, 1402, 155, 745, 3069, 2252, 4562, 1509, 2873, 3879, 2279, 468, 4360, 3479, 3708, 1350, 3662, 667, 683, 2501, 2863, 1330, 1132, 2603, 1164, 4231, 1414, 1636, 4226, 3303, 955, 2826, 267, 809, 3239, 3266, 3271, 4173, 2941, 3638, 3440, 966, 257, 3835, 1464, 1435, 4229, 986, 745, 2141, 4138, 2823, 2855, 925, 1478, 656, 3466, 2527, 2655, 1228, 4550, 1615, 3752, 2475, 3908, 1198, 2501, 3626, 1739, 3075, 4091, 1993, 2843, 583, 320, 1822, 1862, 1477, 1501, 3645, 2178, 2764, 1280, 110, 3270, 3368, 3884, 2820, 865, 2762, 155, 3377, 1320, 983, 2029, 1216, 799, 1395, 2535, 50, 3131, 1890, 3106, 1297, 2529, 556, 3880, 3058, 2522, 646, 1647, 1089, 3725, 1086, 1644, 3694, 3973, 4282, 2215, 3305, 705, 1996, 2282, 2821, 3158, 354, 3977, 3948, 125, 2892, 27, 3162, 3981, 978, 2285, 1705, 414, 2328, 4219, 1058, 799, 1233, 3330, 3849, 3946, 755, 1433, 83, 3472, 162, 2802, 3886, 3551, 4537, 121, 2470, 3948, 2050, 1483, 3490, 3953, 3392, 1510, 2753, 2961, 4137, 924, 1484, 2061, 448, 1576, 381, 1026, 1602, 1863, 3938, 3044, 849, 2327, 2051, 827, 3529, 737, 1337, 1256, 31, 4025, 2451, 2009, 4034, 1841, 3210, 880, 2676, 3635, 2503, 1012, 1735, 2660, 3379, 1516, 4275, 3547, 2230, 4183, 655, 975, 3532, 1224, 670, 2294, 2563, 3570, 2589, 2765, 3947, 1623, 3053, 727, 1883, 3149, 3834, 2425, 2902, 2496, 4259, 4245, 3425, 2339, 2575, 927, 2262, 977, 4501, 2420, 1914, 3664, 3270, 356, 1252, 1181, 4419, 2429, 934, 4367, 376, 1446, 1438, 217, 2742, 1590, 3720, 1071, 4242, 981, 1761, 4235, 3947, 104, 2193, 1294, 144, 1979, 1732, 390, 2983, 3349, 3442, 2520, 1761, 4471, 4402, 3122, 469, 4119, 2086, 4542, 1618, 111, 570, 4408, 891, 700, 525, 110, 738, 994, 1968, 2079, 365, 3885, 3152, 2744, 3852, 3927, 2674, 2454, 3210, 190, 4267, 3106, 3861, 3268, 2708, 2498, 1799, 480, 4131, 3952, 1981, 3057, 1328, 2479, 1688, 236, 3450, 4123, 1750, 780, 3482, 2287, 1523, 3580, 4092, 3142, 1655, 676, 3594, 100, 269, 2992, 4240, 4206, 3360, 1735, 243, 3569, 3076, 4412, 2815, 2403, 762, 2445, 3404, 3374, 2328, 3929, 675, 2293, 4055, 1934, 2871, 3766, 56, 4474, 3875, 3748, 2528, 3342, 2906, 4278, 4541, 2760, 913, 1676, 223, 1330, 3962, 4346, 722, 3492, 752, 3584, 725, 2580, 526, 142, 475, 336, 4492, 2952, 3984, 697, 440, 4426, 1831, 398, 3386, 2674, 4430, 2393, 1824, 1116, 2848, 4386, 3045, 74, 3615, 4000, 1654, 692, 2788, 3389, 2299, 1723, 2070, 1679, 4028, 3345, 2185, 2498, 3796, 2761, 2826, 1328, 4550, 2996, 2933, 3912, 1195, 4183, 2776, 2467, 1389, 1202, 251, 1268, 2910, 745, 311, 4116, 3177, 3856, 1385, 1145, 4516, 1015, 2175, 2550, 1922, 2233, 4352, 351, 2443, 90, 2838, 2281, 642, 549, 3626, 3443, 2505, 1481, 245, 2177, 3649, 1833, 1882, 706, 2376, 1849, 1372, 2355, 1466, 4238, 531, 3569, 4439, 2713, 3078, 144, 1585, 2437, 2504, 2867, 4546, 469, 3216, 3876, 4568, 1532, 2287, 4340, 4440, 1977, 4363, 2415, 4304, 3858, 1418, 2857, 3388, 1788, 1191, 655, 4091, 4109, 1939, 1045, 2526, 1537, 4464, 4107, 2138, 3607, 1233, 2010, 1137, 977, 883, 793, 3060, 3649, 2437, 4306, 193, 3217, 3288, 961, 1603, 1307, 446, 1487, 3340, 1053, 4283, 3803, 2600, 2048, 3053, 3236, 835, 2472, 1715, 1665, 4470, 3838, 4580, 859, 4362, 2015, 2669, 3668, 1625, 1854, 2557, 4388, 327, 3058, 3670, 1538, 1867, 3299, 199, 2308, 3921, 3478, 700, 3484, 572, 3634, 1488, 268, 2813, 232, 2705, 395, 227, 865, 1719, 2917, 341, 3989, 3026, 2544, 4446, 647, 3084, 498, 4250, 828, 3578, 2615, 1725, 3124, 3111, 515, 817, 4173, 3418, 754, 3610, 606, 578, 490, 3453, 2532, 2350, 1700, 645, 136, 521, 4038, 1692, 1793, 4271, 2964, 874, 2818, 364, 1607, 3022, 3057, 4456, 1732, 1737, 3636, 3296, 3258, 1464, 1468, 4394, 4202, 2800, 2131, 4580, 2349, 3172, 4269, 568, 1815, 4474, 1747, 3128, 3767, 3969, 3650, 3744, 406, 1530, 4421, 2100, 3537, 184, 1374, 1762, 253, 3317, 3618, 4366, 2049, 3478, 1276, 4576, 747, 4005, 3153, 376, 1567, 1440, 1316, 630, 4183, 4223, 1248, 2679, 2842, 661, 169, 4350, 2655, 1991, 4566, 1430,0]);
    // message
    let m:Seq<i128> = Seq::from_native_slice(&[0, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, 0, 0, 0, 0, 1, -1, -1, 0, -1, 0, 0, -1, 0, -1, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 1, 1, -1, 0, 0, 0, 1, 0, -1, 0, -1, 0, -1, 0, 0, -1, 1, -1, -1, 0, -1, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 1, -1, 0, 0, 0, 1, 0, -1, -1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, 1, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, -1, -1, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, -1, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 1, -1, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, -1, 0, 0, 1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 1, 1, -1, 1, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, -1, 0, 1, 0, 0, -1, -1, 0, 1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 1, 1, -1, -1, 0, -1, -1, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, -1, -1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0, 0, 0, -1, 0, -1, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0, 1, 1, -1, 0, 0, 0, -1, 1, 1, 0, -1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 0, -1, 0, -1, 0, 0, 1, -1, 0, 0, 0, 0, 1, 1, 0, 1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 1, 1, -1, 1, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 0, 1, -1, 1, 1, 1, 0, -1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, -1,0]);

    // irr Konstant machen!
    let mut irr: Seq<i128> = Seq::new(n_v.p + 1);
    irr[0] = -1 as i128;
    irr[1] = -1 as i128;
    irr[n_v.p] = 1 as i128;

    // encryption
    let c = encryption(&m, pk, &n_v);
    println!("encryption done!");
    let cipher:Seq<i128> = Seq::from_native_slice(&[1497, 258, -1059, -585, 15, 2118, 2196, -1590, 1470, 2118, 294, 279, 648, 1296, 1806, -54, 1242, 2187, -492, -690, 660, 825, -93, 2085, 1950, -1890, -1845, 288, -1059, 201, -192, -513, -1566, -924, -1917, -672, 1470, 2295, -2166, -1470, 1062, 1383, 1962, -1986, -1842, 2235, -1407, 1536, -291, 2292, 2103, 729, -1617, 162, 1476, -1542, 1593, -2097, -1233, -735, 2292, -1779, 675, 192, 825, 939, -921, 639, 2244, -597, -2247, -2184, 1944, -390, 657, 2007, 1617, -1071, 15, -1476, 645, 1179, -1956, -1872, 1293, -585, 2142, 51, 684, 1908, 2235, -1950, 1785, -1785, -1329, -930, -1863, -1323, -756, -180, -2169, -165, -780, -90, 1143, 1413, 720, 831, -1461, 225, 1767, 30, -2016, 894, 2064, -951, -918, -1794, -1845, -1143, -723, 219, -690, 1437, -1197, 1329, -444, 1113, 1851, -858, 1020, 696, 1659, -126, -1554, -1749, -1533, 375, 387, -60, 2049, 351, -1440, 1368, -2082, 1902, 93, 375, -2292, -1629, 2295, 1140, -1911, -96, 2184, 2019, 402, 1107, 960, 765, 1662, 1824, -147, -1233, -1935, -2148, 9, -42, 1131, -1710, 1002, 2037, 1527, 1566, -183, 1590, 2091, 1230, 993, 1827, -1761, 9, -1440, -741, 1602, 1884, 1509, 1269, -1812, -369, -2010, 2259, 1821, 1509, 906, -252, -2067, -564, -1029, 804, 447, 2127, 141, 801, 1377, -378, 543, -1419, -624, -1824, -1716, -2010, -2223, 186, -2106, 780, 51, -873, -1995, 1839, 627, 1377, -1125, -1155, 1989, -2280, 2193, 435, -1047, 1335, -1098, -2073, 1893, -150, 1563, -807, -1371, 576, 426, -2253, 1647, -1344, -171, 2037, -1824, -1491, -39, -945, 21, 2118, -453, 1587, -2004, 516, -1110, 1941, -1737, 705, -2280, -318, -963, 906, -1830, -441, 735, 792, 174, 2139, 1176, -1497, -681, -1824, -570, -336, 135, 957, 2055, -1632, 576, 822, -2211, -1236, 252, 1527, 1698, 924, 879, -1434, 1452, 1914, -471, 555, 1167, 1092, 1818, -1047, 1707, -2229, -1230, 846, 2178, -207, 2070, 975, -1491, 2271, -348, 1824, -1488, 171, 504, -645, -1854, -1341, -849, -978, -1905, -651, -363, -114, 1008, 705, 261, -336, 1596, -1245, 1848, 594, 1431, -279, 2214, 2019, 1029, 915, 1542, 1245, 1362, 1539, 1524, 240, 486, -1314, -768, -1533, 192, -1275, -1254, -735, -2133, 1320, -477, 81, 1290, 1197, -264, -126, 990, -1818, -63, -123, -1857, 1572, -1179, 786, 2115, -414, -444, 303, -519, -465, -495, -1632, -2226, -1683, -1674, 1347, 1479, 1137, 1134, -258, 306, 1263, 1839, -1881, 156, 2292, -1455, 1713, -42, -1947, 1794, 1272, -732, 498, -897, -2280, 246, 684, -1971, -474, 414, 807, 1281, -2139, -1524, 384, -1386, 1863, -1731, -609, -1653, -372, -375, 1674, 1968, 1974, -1677, 1482, -1671, -2028, -777, -1845, 189, 1086, -2205, 1500, 2139, -363, 213, -861, 1728, -201, -321, -2040, 744, -2115, -1533, -1146, 417, -1347, 846, -483, 1797, -435, -972, -9, -1137, -1332, -825, 996, 1632, -1416, 1215, 792, -1410, 930, 1932, -1512, 1758, -210, 2022, 876, 2031, 1773, 2178, 648, -2217, -1065, 2124, -441, 540, 1878, 1533, -1470, 600, 702, -477, -1470, -291, 366, -1356, 1179, -789, -555, -1245, -2142, -2148, -2157, -426, 1980, -705, 738, -183, 105, 1500, -918, -90, 1536, -1821, 1953, -1491, 1494, -2049, -246, -1134, -585, -708, -816, 162, 402, 1980, -1302, 579, 444, 1164, 642, -1554, -1815, -384, -1377, -1254, 273, 1206, 165, -2202, -924, 618, -1179, -33, 2208, 648, -1044, 1224, -1965, -1650, -1947, -666, 1212, 369, 645, 909, -870, -1317, 1152, 1128, -1380, -1488, -1458, -396, 1785, 858, 1185, 477, 720, 1416, 1779, -1470, 216, -768, 783, -753, 12, 240, -1857, 2286, -2097, 1071, -726, -354, -1134, 477, -954, 975, -639, -1284, 936, -1905, 924, -1371, 972, -306, -1548, 1512, -894, -987, -246, -1275, 1023, -1611, 1980, -2055, -903, -1266, -1872, -702, 1338, -405, 1887, -1356, 2034, 1296, 384, -774, 756, 1683, -1137, -717, 1575, -1425, 147, -843, 2097, -807, 1023, 240, 1644, -1014, 1059, -1659, -726, 1836, -570, 1734, -684, -2109, 567, -2118, -2046, 2037, 1266, -702, 2193, 150, 1896, 1380, -720, -1152, -348, 630, -81, -1176, 1389, -546, 1773, -918, 1260, 1515, 1842, -318, -2223, -708, 1500, 825, 204, -2196, 1230, -1599, 615, 1848, 1605, 426, -1464, 1530, -1665, -276, -174, -2181, -1113, 2073, 759, 1377, -2025, 1314, -339, 1635, 273, -2070, 1137, -1368, 1980, -2127, -1989, -213, 873, -1176, 87, 726, -318, 306, 24, -1893, -1440, -738, 327, -351, 2088, 1344, -729, 1152, 1266, -1995, 246, -186, -963, 1620, -1251, -855, -333, -417, -201, -1746, -1077, 138, -12, 1065, 1902, -1974, 354, -294, 1206, -345, -243, -711, 408, -2238, -330, -378, 702, 597, -588, 2106, -846, -666, -564, -1038, 150, -114, 1020, -381, 156, -633, -714, 1056, 1704, 198, 393, 420, 54, -1617, -2016, 2259, 1131, -957, 1650, 327, 1908, 66, 24, 2010, 1902, 477,0]);
    assert_eq!(deg(&cipher),deg(&c));
    println!("Compare weight:");
    assert_eq!(weight(&cipher),weight(&c));
    for i in 0..cipher.len(){
        if cipher[i] != c[i]{
            panic!("Encryption failed!")
        }
    }
}

#[test]
fn test_decryption(){
    let n_v = ntru_v!(0);
    let sk:(Seq<i128>,Seq<i128>) = (Seq::from_native_slice(&[0, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, 1, 0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 1, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1, 0, -1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 0, 0, -1, 0, 0, -1, -1, 0, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 1, -1, -1, -1, 0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 1, -1, 1, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, -1, 1, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, 0, 1, 0, -1, 0, 1, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, 1, -1, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, -1, 0, 0, 1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 1, 0, -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 1, -1, -1, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 1, -1, -1, 0, 1, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0, 1, -1, 0, 1, 0, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 1, 1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 1, -1, 0, 1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 1, -1, 0, 1, -1, -1, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, -1, 1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1, 1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 0, 1, -1, 0, -1, 0, 0, 1, 1, 1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 1, 0, 0, -1, -1, 0, 0, 1, -1, -1, 0, -1, 0, 0, 0, -1, -1, -1, 0, 1, 0, 0, 1, 0, 0, -1, -1, 1, 0, 0, 0, 0, -1, -1, 0, 0, 1, 1, 0, 0, 0, -1,0,0,0,0,0]),Seq::from_native_slice(&[1, 1, 0, 1, 1, 2, 2, 2, 0, 1, 2, 0, 1, 1, 2, 2, 1, 1, 0, 2, 2, 0, 0, 2, 1, 0, 0, 0, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 0, 2, 0, 2, 2, 0, 1, 1, 0, 0, 1, 1, 2, 1, 0, 1, 2, 1, 1, 2, 0, 1, 2, 2, 2, 0, 1, 0, 2, 2, 2, 0, 0, 1, 2, 2, 1, 1, 0, 1, 1, 2, 2, 0, 0, 2, 2, 2, 2, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 0, 2, 2, 2, 2, 0, 1, 2, 0, 2, 2, 0, 2, 0, 1, 0, 2, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 1, 2, 2, 1, 2, 2, 1, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 2, 1, 0, 2, 2, 0, 2, 0, 2, 0, 0, 1, 2, 2, 0, 0, 0, 2, 1, 2, 0, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 0, 0, 1, 2, 2, 1, 0, 1, 0, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 2, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 2, 1, 1, 0, 2, 1, 2, 1, 1, 1, 1, 0, 2, 1, 2, 1, 1, 0, 1, 2, 2, 0, 2, 1, 0, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 0, 0, 1, 2, 1, 2, 0, 2, 1, 0, 2, 0, 0, 2, 2, 2, 0, 2, 1, 1, 2, 1, 1, 0, 1, 2, 0, 2, 0, 1, 1, 1, 2, 2, 0, 0, 2, 1, 2, 2, 0, 0, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 2, 2, 2, 1, 0, 0, 1, 1, 1, 2, 2, 1, 2, 2, 2, 0, 2, 1, 0, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 2, 1, 1, 0, 1, 1, 2, 1, 0, 0, 2, 1, 2, 2, 1, 1, 0, 2, 0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 2, 0, 1, 1, 0, 2, 2, 0, 0, 1, 1, 2, 1, 0, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 1, 1, 1, 0, 1, 0, 2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 1, 1, 2, 1, 2, 2, 2, 1, 0, 1, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 2, 0, 2, 2, 1, 0, 2, 0, 0, 1, 2, 1, 0, 0, 2, 2, 0, 1, 1, 1, 1, 0, 0, 1, 2, 2, 1, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 2, 1, 0, 2, 1, 0, 1, 0, 0, 1, 2, 1, 1, 0, 1, 0, 1, 1, 1, 2, 0, 0, 2, 0, 2, 2, 1, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 1, 0, 2, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 1, 2, 0, 1, 0, 1, 2, 0, 1, 2, 2, 1, 1, 2, 0, 2, 2, 2, 2, 1, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 1, 2, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 2, 1, 1, 0, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 0, 2, 2, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 2, 1, 1, 0, 2, 0, 1, 0, 2,0]));// message
    let m:Seq<i128> = Seq::from_native_slice(&[-1, 1, 1, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1, 0, -1, 0, 0, 1, -1, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, -1, -1, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, -1, -1, 0, 1, -1, -1, 0, 1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, -1, -1, 1, 0, 0, 0, -1, 0, -1, 0, 1, 0, -1, -1, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, -1, -1, 1, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, 1, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, -1, -1, 0, 0, 0, 0, 1, -1, 0, 1, -1, 0, 0, 0, 0, -1, -1, -1, -1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, -1, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, -1, -1, 0, -1, 0, 1, -1, -1, 0, 0, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, -1, 0, -1, 0, -1, -1, -1, 0, -1, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 0, -1, -1, -1, 0, 0, 0, 1, 0, 0, -1, -1, -1, -1, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1, 1, -1, 0, -1, 1, 0, -1, -1, 0, -1, -1, 0, 0, 1, 1, -1, 0, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, 0, 1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 1, 0, 0, 1, -1, -1, 0, 0, 0, -1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, -1, -1, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 1, 0, -1, 0, 0, 0, -1, 0, 0, 1, -1, -1, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, 0, -1, -1,0,0]);
    println!("encryption done!");
    let e:Seq<i128> = Seq::from_native_slice( &[1, 1, 2, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 1, 0, 2, 2, 1, 1, 0, 2, 0, 0, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 0, 1, 0, 2, 0, 2, 2, 1, 2, 1, 2, 0, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 2, 1, 2, 1, 1, 0, 0, 1, 2, 1, 0, 1, 1, 0, 2, 0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 1, 0, 1, 1, 0, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0, 1, 0, 1, 0, 2, 1, 0, 2, 0, 1, 1, 1, 2, 0, 1, 1, 1, 0, 0, 1, 2, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 1, 2, 0, 1, 2, 1, 1, 2, 0, 1, 1, 1, 2, 0, 0, 0, 2, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 2, 0, 2, 1, 1, 1, 0, 2, 0, 1, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 2, 0, 2, 1, 1, 0, 2, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 2, 2, 2, 0, 1, 0, 0, 2, 1, 0, 2, 2, 2, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 2, 0, 2, 1, 2, 2, 2, 2, 1, 2, 0, 2, 0, 0, 2, 0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 2, 2, 2, 1, 0, 0, 1, 0, 2, 0, 1, 2, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 0, 1, 0, 0, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 1, 1, 2, 1, 0, 0, 1, 2, 2, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 2, 2, 0, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 1, 0, 2, 0, 0, 1, 2, 2, 1, 1, 2, 1, 2, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 2, 0, 0, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 1, 0, 1, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 1, 0, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1, 2, 2, 2, 2, 1, 1, 2, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 2, 0, 1, 2, 0, 2, 0, 1, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 2, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 2, 1, 0, 0, 2, 2, 0, 0, 0, 1, 0, 1, 2, 0, 0, 2, 2, 1, 2, 2, 0, 1, 2, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 1, 0, 0, 2, 2, 1, 2, 1, 1, 0, 0, 2, 1, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 0, 2, 0, 0, 1, 0, 2, 1, 1, 1, 0, 0, 2, 2, 0, 2, 0, 0, 1, 1, 0, 2, 1, 2, 2, 0, 2, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 0, 1, 0, 2, 1, 0, 2, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 2, 2, 1, 2, 0, 0, 1, 2, 2, 1, 1, 1, 1, 2, 0, 2, 0, 1, 2, 1, 0, 2, 1, 2, 0, 1, 1, 1, 1, 1, 2, 0, 1, 0, 1, 2, 2, 2, 1, 2, 1, 0, 2, 0, 2, 1, 0, 2, 2, 2, 1, 1, 2, 0, 2, 2, 0, 0, 0, 1, 2, 1, 2, 2, 2, 2, 0, 0, 1, 2, 1, 1, 2, 0, 1, 2, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 1, 2, 0, 2, 2, 1, 2, 0, 0, 0, 2, 0, 1, 1, 2, 0, 1, 0, 0, 0, 2, 0, 0, 1, 2, 2, 2, 2, 0, 1, 0, 1, 1, 1, 1, 0, 2, 2, 2, 1, 1, 0, 0, 1, 1, 0, 2, 0, 0, 2, 2, 2, 1, 2, 1,0]);

    let mut f_3_c:Seq<i128> = Seq::from_native_slice(&[7, 4517, 4500, 4546, 4517, 4522, 4474, 4506, 4467, 4371, 4464, 4518, 4422, 4382, 4507, 4518, 4467, 4487, 4517, 4477, 4395, 4417, 4531, 4557, 4514, 4499, 4441, 4403, 4452, 4574, 4549, 4523, 4539, 4525, 4475, 4375, 4344, 4420, 4497, 4506, 4496, 4446, 4472, 4467, 4489, 4459, 4445, 4501, 4468, 4441, 4403, 4419, 4423, 4476, 4519, 4553, 4500, 4444, 4450, 4437, 4453, 4477, 4406, 4368, 4410, 4507, 23, 4559, 4578, 4556, 4487, 4444, 4432, 4472, 4509, 4514, 4480, 4487, 4523, 4522, 4410, 4384, 4401, 4437, 4440, 4447, 4542, 4553, 4512, 4411, 4410, 4484, 4543, 4484, 4481, 3, 10, 4506, 4538, 5, 4518, 4479, 4484, 4496, 4469, 4545, 4547, 4526, 4471, 4466, 4456, 4454, 4423, 4413, 4508, 4543, 4494, 4405, 4484, 4481, 4517, 4557, 4579, 4499, 4490, 4559, 4495, 4453, 4490, 4479, 4470, 4567, 4520, 4562, 4556, 4552, 4556, 4558, 4590, 4506, 4484, 4485, 4477, 4544, 4503, 4460, 4523, 4500, 4543, 4502, 4514, 4532, 4491, 4498, 4486, 4522, 4482, 4498, 4526, 4532, 4489, 4520, 4552, 4561, 4439, 4457, 4514, 4516, 31, 4557, 4516, 4533, 4517, 4508, 4535, 4507, 4503, 4450, 4421, 4496, 11, 4563, 4507, 4512, 4474, 4536, 4551, 4526, 4490, 4495, 4526, 4585, 4573, 4509, 4468, 4482, 4496, 4553, 4588, 4533, 16, 4572, 4548, 4520, 4548, 4468, 4381, 4411, 4435, 4528, 4473, 4469, 4464, 4447, 4501, 4521, 4443, 4428, 4462, 4490, 4480, 4480, 4497, 4511, 4516, 4497, 4509, 4548, 4527, 4460, 4526, 4552, 4412, 4419, 4499, 4519, 4499, 4471, 4576, 4581, 4519, 4434, 4451, 4452, 4422, 4440, 4476, 4445, 4542, 4567, 4530, 4477, 4495, 4584, 4471, 4463, 4476, 4506, 4476, 4392, 4547, 4495, 4486, 4552, 4500, 4467, 4488, 4574, 39, 3, 4514, 4453, 4494, 4537, 4523, 4488, 4532, 4532, 4515, 4498, 4429, 4423, 4564, 4556, 4571, 4547, 4496, 4479, 4512, 4488, 4546, 4520, 4519, 4534, 4491, 4536, 4517, 4443, 4581, 11, 41, 4499, 4521, 4541, 4464, 4530, 4583, 19, 4547, 4436, 4446, 4533, 4576, 4542, 4470, 4515, 4469, 4472, 4562, 4535, 4523, 4525, 29, 4536, 4557, 17, 4522, 4483, 4556, 4568, 4497, 4490, 4483, 4501, 4484, 4440, 4455, 4488, 4482, 4460, 4508, 4500, 4486, 4460, 4469, 4492, 4489, 4485, 4461, 4474, 4503, 4553, 2, 4459, 4496, 4504, 4563, 13, 4472, 4563, 4553, 4522, 14, 4498, 4489, 4460, 4443, 4449, 4445, 4496, 4491, 4493, 4548, 4552, 4514, 4494, 4491, 4550, 4560, 4550, 4564, 4502, 4511, 4506, 4414, 4465, 4428, 4494, 4487, 4521, 4551, 64, 30, 4557, 4472, 4566, 40, 4562, 4510, 4541, 4590, 4584, 4563, 4504, 4513, 4569, 4588, 4546, 4516, 4489, 4524, 11, 4533, 4527, 4490, 4486, 4494, 4493, 4561, 4564, 4481, 4429, 4496, 4514, 4546, 4550, 4575, 4515, 4530, 23, 4553, 4580, 4476, 4510, 4532, 4540, 4553, 4466, 4444, 4580, 4523, 4495, 4570, 4446, 4507, 25, 23, 4579, 4497, 4489, 4517, 4588, 11, 4, 4563, 4557, 4463, 4497, 4571, 4518, 4485, 4503, 4563, 4518, 26, 36, 4461, 4508, 4549, 4536, 4502, 4541, 4585, 4522, 4459, 4478, 4505, 4462, 4523, 4538, 4532, 4540, 4557, 28, 15, 4513, 4491, 4491, 4465, 4477, 4519, 4580, 4468, 4547, 4566, 4522, 4558, 4497, 4539, 4562, 4518, 4554, 4552, 4550, 8, 4493, 4522, 37, 4491, 4545, 4533, 4575, 4521, 4446, 4509, 4576, 4505, 4556, 4500, 4567, 21, 4546, 4582, 6, 4581, 4527, 4528, 4558, 4585, 4513, 4539, 4550, 4567, 4564, 4560, 4485, 4499, 4488, 4535, 4586, 4504, 4549, 4491, 4535, 4522, 4560, 4537, 4458, 4464, 6, 4575, 4497, 4495, 4554, 4546, 4440, 4564, 4534, 4478, 4510, 4554, 4577, 4442, 4514, 4483, 4480, 4506, 4572, 4516, 4563, 4534, 39, 4583, 4559, 4468, 4488, 4553, 4494, 29, 4555, 4557, 4521, 4486, 4550, 4529, 4568, 4523, 13, 4564, 4490, 4445, 4491, 4521, 4556, 4489, 4574, 4558, 4524, 13, 4546, 4527, 4539, 4462, 4482, 4, 4586, 4582, 73, 4586, 4478, 4497, 4581, 4575, 4583, 4512, 4513, 4588, 4469, 5, 4506, 4496, 4568, 4499, 4577, 4539, 3, 4584, 4573, 4526, 4503, 4535, 4516, 4536, 4580, 4452, 4489, 4529, 4565, 4559, 4445, 4535, 4515, 4498, 4475, 4474, 4565, 4422, 4500, 4488, 4520, 4536, 40, 4564, 4548, 4564, 4590, 4559, 4516, 4545, 4560, 23, 4565, 4541, 4470, 4546, 4539, 4590, 4525, 4477, 4528, 4475, 4443, 4475, 4554, 4542, 4530, 4506, 4531, 4573, 4523, 4569, 4529, 4505, 4551, 4495, 4562, 4482, 4441, 4525, 4445, 4508, 4532, 4543, 4, 4510, 4576, 4543, 4494, 4552, 4522, 4515, 4561, 4586, 24, 4504, 4558, 4541, 4536, 4543, 4566, 4545, 4490, 4449, 4531, 4537, 4552, 4470, 4489, 4556, 4511, 4527, 4555, 4589, 4558, 4573, 4516, 4545, 4504, 12, 16, 4497, 4569, 47, 4581, 4525, 4502, 4558, 4529, 4583, 4574, 4526, 4540, 4563, 4506, 4542, 4571, 4541, 4567, 4543, 4559, 7, 4486, 4494, 4531, 4528, 26, 4485, 4506, 4586, 4548, 4526,0]
);
    let cipher:Seq<i128> = Seq::from_native_slice(&[-2097, 489, -2007, -285, -1386, 951, 1137, 1968, 1503, 1416, -1890, 1473, -1167, 732, -504, -2247, -1470, -648, 1512, 1044, -1893, -372, 291, 1257, 1650, -558, 399, 258, -1428, 1872, 294, -351, -1665, -933, -750, 207, -660, 969, -2208, 828, -2133, 1245, 2037, -726, -1821, 1221, -255, 417, -1200, -1602, 2217, -1566, -273, -1530, -1524, -615, 1416, -2088, -663, 648, -267, -1539, 1656, -2118, 459, -2028, 855, 1071, -1176, 1047, 1923, 138, -1068, 1998, 1791, -2082, -282, 1326, -1614, 2169, -801, 966, -459, 1254, -1866, -831, -2205, -981, -1242, 1098, -471, -624, 240, 990, -1155, -6, 1197, 459, 1755, -9, 1539, -1650, 51, 1428, 2295, -807, 1194, -1872, 432, 315, -663, -735, -714, 1161, -384, -711, 1752, -2082, -2037, 1782, -1218, 1524, -903, -528, 0, 2169, 996, -63, -375, 759, 561, 543, -1101, 252, 1716, -459, 285, 306, -1875, 1374, -720, -795, -1536, -837, -666, -924, -864, 1977, -1509, -1143, 1308, -627, 117, -228, 2094, 777, 150, -1707, 33, -1554, -1182, 1527, 141, 6, 834, 1512, -537, -1710, -216, 1428, 789, 1047, -738, -636, 912, 2259, 1248, -1716, 1587, -72, -2253, 885, 1545, -1755, -48, 1449, 1611, -903, -1845, -24, -1149, -1854, -261, 2112, -1569, 108, -714, -669, -27, 1227, -1695, -1323, 936, -873, 1917, 1707, 1773, -1446, -1848, -639, -474, -1257, 90, -1572, -1296, -273, -2031, 2142, 1743, 1947, -885, 60, 1371, 105, 795, -207, -372, -1578, -1491, -1287, 429, 1059, -165, -828, 1488, -1863, -2034, -1575, 1677, 1791, -1944, 1530, 1470, 1833, -1167, 702, -885, 1359, 186, -885, -1389, 870, -1113, 1188, 1449, -999, -2058, 504, -573, 318, 1722, 1125, -2091, -2061, -2139, -993, -1050, 324, -1677, -2211, -1770, 360, 477, 1869, 1242, 1929, -1257, 1599, 390, 1695, -909, -2088, -1167, 1248, 858, 921, 1713, -1659, 870, 30, -189, -1632, 1659, -756, 1956, 1551, 567, 291, 327, -384, -2142, 726, -1677, -1350, 2001, -633, 2079, 1761, 1224, 2163, 1230, 531, 1896, 1509, -2280, 1008, -1539, 1359, -1158, -1545, 375, 1356, 1728, 2283, -1788, 1158, -2097, -2250, 1851, 558, -1611, 267, 1326, -129, 1563, -126, -711, -1863, -2289, -1146, -882, 525, 672, -702, -564, 2280, -1263, 120, 1329, -2256, 774, -1809, -1950, -1158, 366, 1587, -234, 1512, 1812, 1536, 903, 1482, 843, 1542, -1407, -1791, 2148, -1809, -1902, -363, 1905, -51, -2292, 1665, -1233, 618, -2001, 1713, 648, -534, -1755, -2262, 813, -1377, 339, 165, -549, 186, 2007, -1845, 1707, 2151, 1326, -1554, -1788, 1899, 1578, -600, 1215, 1788, 450, 1107, -372, -1098, -1950, 39, 2166, -489, -291, 1113, 792, -18, 153, -843, -201, 546, -1932, -102, 864, 849, -1986, 189, 1776, -2205, 1188, -2016, -1092, 936, -1026, 264, 1695, -1929, -1698, -1710, -1575, -1626, 1821, 18, 1386, 1497, -1719, -1359, 1272, -1275, -2028, 1530, -2082, 201, -1677, -1806, 1239, 1617, 240, 1701, -1047, -246, -1380, -162, -552, -2031, -2250, 795, -729, -1314, 1710, -789, -1395, -1596, -2268, 1620, -1383, -471, 870, -1782, 477, -984, -2214, -1986, -888, 708, -528, 18, 1446, -1362, 588, 1827, -2157, -1572, 1857, 1164, -621, 2208, 1440, -624, 2286, 2190, 345, -1509, -48, -1395, -1704, 663, 1731, -1224, -1587, -780, 2133, -522, 1626, 1698, 294, 1086, -1332, -1785, 282, 2043, 507, -1344, 525, -924, -240, 2046, 333, -1611, -939, 2052, -1212, -1215, -633, -519, 2253, 57, -552, 711, 1455, 2223, -153, 1863, -1986, -2262, -516, 588, 876, 351, -1437, -846, -609, 2166, -120, -969, 1536, -1815, 1251, 1296, -2025, 2214, 1512, -756, 1260, -1677, 2253, 768, 1152, -1632, 1005, -1506, 798, -114, -2253, -981, -1482, 1092, -807, 1431, -609, -882, 1944, -2109, -1140, 1761, 1908, 1344, -546, 1302, 2034, -1488, 516, -1563, 390, 1743, 408, 1845, 312, -2175, 96, -1170, -147, -1992, -2265, -312, -2277, 339, 393, -822, 1407, -696, 441, 333, 1935, -2046, 1920, -1113, 1191, -483, -1164, 441, 1731, 1275, 291, -954, 132, -267, 651, 717, -2070, 48, -1065, 1755, -1071, 36, -723, -1281, 1320, -45, -639, 174, -429, -1680, -339, 771, -1191, 885, -261, 924, -1410, -849, -33, 1191, -2214, 1419, -2265, 1419, 1449, -2058, -1650, -486, -1230, 1176, -1035, 1116, -1479, 873, 2106, 2091, -1446, 1695, -426, 516, -141, 1140, -1545, -153, 273, 252, -1293, -1524, 2286, 1989, -414, -1830, -546, -1299, -1209, 1023, -1605, 978, 195, 1095, -387, 930, -1494, -504, -1593, -2268, -2097, -414, -933, -228, 849, 231, -2208, 678, 648, 2274, -807, -2019, -1326, 675, -87, 999, 1287, 2259, -1056, -699, 738, -747, -1656, -1053, 963, -1938, 1023, 417, -1689, -1542, 1548, 1170, -1479, 93, 1704, -2082, 282, 360, 1311, -2079, 2214, -1050, -186, 1776, 2211, -2040, 1074, 321, -441, -678, 753, -1353, -750, 2010, -777, -2187, -2193, 612, -1779, -2151, -144, -360, 1158, 1101, 1479, 615, 66,0]
);

    let result = decryption(cipher,sk, &n_v);
    println!("message: {:?}", result);

    for i in 0..result.len(){
        if result[i] != m[i]{
            println!("Index {:?}, result[i] = {:?} != {:?} = m[i]",i,result[i],m[i]);
        }
    }

    assert_eq!(weight(&result),weight(&m));
}

// This tests faileds sometimes
#[test]
fn test_encryption_decryption() {
    let n_v = ntru_v!(0);
    let keys = key_gen(&n_v);
    let pk = keys.0;
    let sk = keys.1;
    let s_k = Seq::from_seq(&(sk.0));
    let s_k_1 = Seq::from_seq(&(sk.1));
    let p_k = Seq::from_seq(&pk);
    // message
    let m = create_rand_poly(n_v.w,n_v.p);
    // encryption
    let c = encryption(&m, pk, &n_v);
    println!("encryption done!");
    let result = decryption(c, sk, &n_v);
    for i in 0..result.len(){
        if result[i] != m[i]{
            println!(" m is {:?}",m);
            println!("secret Key {:?}, {:?}",s_k,s_k_1);
            println!("public key {:?}",p_k);
            break;
        }
    }
}

// This fails, thats why I think it is connected to eea
    #[test]
    fn test_problems(){
    let sk:(Seq<i128>,Seq<i128>) =(Seq::from_native_slice(&[0, 1, 0, 0, 0, -1, 1, 0, 0, -1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, -1, 0, 0, 1, -1, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 1, 0, -1, 0, 1, -1, 1, -1, 0, 0, 0, 0, -1, 0, 1, 1, -1, 0, 0, 0, -1, 0, -1, 1, 0, 0, 1, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 1, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1, 1, 0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 1, 0, 1, 1, 1, 0, 0, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, 0, 0, -1, 0, -1, -1, 0, 1, 0, 0, -1, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 1, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 1, 0, -1, -1, -1, -1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 1, 1, 0, -1, 0, 1, 1, -1, 0, 0, -1, 0, 1, -1, 0, 1, -1, -1, 0, 0, 0, 0, -1, 0, 1, -1, 1, 0, 1, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 0, -1, 1, -1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1, -1, 1, -1, 0, 1, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1, -1, -1, 1, 1, 1, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 0, 1, -1, 1, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0, 0, -1, -1, 0, -1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, -1, -1, 0, 1, -1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0, 0, 1, 1, 0, 1, 0, 0, -1, 1, 0, 1, -1, 0, -1, 0, 0, -1, 1, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, -1, 1, -1, -1, 0, 1, 0, 0, 1, 0, 0, -1, 0, -1, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 1, 0, 1, 0, -1, 0, -1, 1, 0, 1, -1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1, 0, 0, 0, -1, 1, 0, 1, 0, 1, 1, 0, -1, 0, 0, 0, 1, 0, -1, 0]),Seq::from_native_slice(&[0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 2, 2, 2, 1, 0, 0, 2, 1, 2, 2, 2, 0, 1, 1, 2, 1, 1, 2, 2, 1, 0, 0, 1, 1, 2, 1, 0, 1, 0, 2, 2, 0, 0, 2, 0, 2, 1, 0, 0, 1, 2, 0, 1, 1, 2, 2, 1, 1, 0, 1, 2, 0, 0, 0, 2, 1, 0, 1, 2, 1, 2, 0, 2, 1, 1, 0, 1, 0, 0, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 0, 2, 0, 1, 0, 2, 2, 1, 1, 2, 1, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 1, 2, 0, 1, 0, 2, 2, 2, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 2, 1, 0, 1, 0, 1, 2, 1, 2, 0, 1, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 1, 1, 2, 2, 1, 2, 0, 2, 0, 1, 2, 1, 0, 1, 0, 2, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1, 2, 0, 0, 0, 1, 2, 0, 0, 2, 1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 2, 1, 1, 0, 2, 0, 0, 1, 0, 1, 2, 2, 0, 1, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 2, 2, 1, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0, 2, 2, 1, 0, 2, 1, 2, 1, 1, 2, 1, 0, 2, 1, 2, 0, 2, 1, 0, 2, 1, 1, 2, 0, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 2, 1, 2, 2, 0, 2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 2, 1, 2, 2, 0, 2, 1, 1, 2, 0, 2, 2, 1, 2, 1, 0, 2, 2, 1, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 0, 0, 1, 1, 2, 1, 0, 2, 0, 0, 1, 0, 0, 2, 1, 2, 1, 0, 1, 0, 1, 1, 2, 1, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 2, 2, 0, 2, 0, 0, 1, 2, 2, 2, 1, 1, 1, 0, 2, 0, 2, 0, 2, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 2, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 1, 2, 2, 0, 0, 1, 2, 2, 1, 1, 1, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 2, 0, 1, 1, 0, 1, 2, 0, 0, 2, 0, 0, 0, 2, 2, 0, 0, 2, 0, 1, 2, 1, 1, 0, 1, 0, 0, 2, 2, 1, 2, 1, 1, 2, 1, 0, 2, 2, 0, 1, 2, 0, 2, 0, 0, 1, 2, 0, 1, 2, 0, 2, 1, 2, 0, 1, 0, 2, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 2, 1, 1, 0, 2, 1, 0, 2, 1, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 2, 2, 1, 2, 2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 2, 0, 0, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 0, 0, 2, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 0, 0, 0, 1, 2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 0, 1, 0, 2, 0, 2, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 1, 2, 1, 1, 2, 1, 1, 2, 0, 0, 0, 1, 0, 2, 2, 2, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 2, 0, 2, 2, 0, 0, 1, 2, 0, 0, 2, 1, 0, 0, 0, 1, 1, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 2, 1, 2, 1, 0, 0]));
    let pk:Seq<i128> = Seq::from_native_slice(&[1510, 287, 2514, 2734, 2293, 675, 548, 1585, 2235, 4221, 1212, 2357, 265, 3356, 2990, 3070, 264, 2680, 159, 4015, 4150, 214, 2260, 760, 4496, 3959, 349, 4230, 309, 3000, 3067, 1586, 4045, 4189, 2858, 1547, 2217, 2186, 3368, 3082, 1457, 2284, 1699, 3387, 1271, 3403, 2361, 3540, 905, 1837, 4322, 4355, 4218, 1661, 3268, 946, 1970, 522, 219, 348, 3228, 17, 1160, 1867, 367, 3113, 85, 1832, 585, 4455, 1876, 3579, 59, 1565, 1402, 2839, 2574, 2344, 4242, 3808, 1953, 1919, 1925, 2193, 3294, 2704, 474, 2281, 164, 1719, 4488, 2961, 4547, 3210, 399, 257, 40, 208, 3386, 1215, 3220, 2358, 4474, 3321, 265, 1604, 2596, 1943, 4440, 996, 363, 2234, 425, 4121, 1089, 4264, 4530, 953, 2675, 751, 3863, 1782, 2594, 3562, 1185, 42, 210, 2478, 2442, 1970, 104, 2540, 4447, 1446, 1492, 3742, 2979, 4223, 3316, 1780, 218, 624, 1060, 2249, 33, 2270, 2456, 1502, 1987, 4298, 1363, 3781, 2016, 1682, 3948, 2950, 3140, 10, 562, 4397, 382, 3969, 3162, 1380, 2069, 2210, 140, 3923, 3362, 2978, 1931, 3109, 925, 1218, 1587, 10, 4023, 1848, 3943, 93, 3236, 3546, 2529, 1494, 2725, 2374, 4538, 4096, 2774, 915, 503, 336, 4357, 522, 699, 3239, 3660, 1309, 28, 3375, 1564, 2696, 3006, 1782, 4221, 1012, 3838, 2768, 552, 894, 3257, 2657, 2095, 1064, 2069, 3619, 4092, 3591, 2710, 2046, 1072, 435, 1383, 725, 4426, 4207, 2832, 3429, 4209, 2441, 2943, 597, 3769, 3709, 819, 34, 3723, 1143, 976, 412, 1999, 1860, 1387, 2826, 3941, 3603, 4035, 3682, 3469, 1108, 1260, 2066, 1591, 3281, 1174, 1462, 2921, 1038, 2401, 740, 3924, 71, 3648, 4378, 4325, 2446, 2207, 2791, 1887, 2734, 3951, 2892, 1240, 2587, 865, 3022, 2609, 273, 234, 154, 4333, 3128, 743, 1540, 2103, 4075, 1556, 724, 2792, 3165, 4098, 3121, 2853, 828, 2195, 2732, 3660, 1847, 2662, 3899, 922, 2090, 4213, 1316, 3359, 2987, 2065, 995, 3709, 3364, 1795, 4206, 3656, 4207, 4091, 2944, 1140, 1639, 2202, 3092, 933, 682, 3749, 325, 3328, 81, 1019, 2480, 1884, 2922, 3498, 2639, 2128, 821, 311, 1909, 4242, 2224, 1908, 2746, 1351, 1402, 2494, 1798, 181, 3871, 2719, 631, 4117, 1524, 3331, 881, 4267, 773, 1721, 1328, 2054, 576, 1395, 4317, 208, 3393, 1264, 3972, 1998, 4109, 4486, 1900, 1423, 1186, 2157, 238, 4023, 3127, 544, 1001, 1015, 2444, 4014, 291, 2255, 4340, 3891, 1421, 3492, 1314, 4134, 3454, 890, 2614, 2637, 3193, 1159, 3780, 1281, 3739, 1841, 619, 1915, 3583, 3682, 1431, 1744, 82, 4025, 3908, 1668, 2078, 1415, 1889, 3937, 4578, 3210, 4050, 848, 1167, 571, 3563, 1692, 660, 308, 2290, 4023, 1095, 1768, 3444, 1569, 4143, 2089, 2128, 2872, 3711, 2339, 1799, 3101, 2418, 1766, 1236, 4520, 439, 4094, 2563, 1025, 83, 711, 2417, 4480, 1072, 1232, 1532, 1768, 1623, 2942, 3606, 3835, 826, 3139, 1509, 2118, 799, 2804, 1345, 908, 1621, 1071, 588, 499, 1214, 972, 2356, 3238, 3936, 3299, 1680, 1283, 486, 344, 4296, 2733, 1617, 1091, 3448, 1219, 804, 82, 4214, 1691, 2621, 3169, 2910, 630, 2941, 3322, 1260, 2221, 3823, 2473, 118, 2163, 1200, 3582, 1782, 3384, 2263, 2080, 4437, 3394, 3351, 838, 3789, 3858, 943, 307, 2121, 913, 2239, 2261, 3423, 1496, 3604, 3464, 2112, 2046, 1474, 2529, 2980, 1993, 2334, 4259, 1569, 3829, 3492, 1628, 1359, 47, 2195, 3488, 756, 1539, 2266, 2535, 3897, 4002, 1914, 775, 3149, 1955, 134, 2412, 1695, 2746, 1360, 1488, 4392, 2444, 3548, 2838, 4484, 2336, 1321, 3065, 2807, 1523, 980, 4474, 2013, 1164, 4130, 531, 1550, 4078, 3367, 4178, 438, 1357, 1814, 3057, 2487, 3500, 1219, 1729, 3860, 716, 4250, 1416, 676, 2603, 618, 422, 2110, 3844, 3891, 3120, 4104, 817, 689, 2133, 1727, 3389, 3571, 355, 3813, 1348, 4129, 1881, 4328, 3675, 1074, 2036, 1621, 3160, 2525, 201, 4185, 1466, 3228, 4338, 3091, 994, 3086, 3491, 865, 1038, 1853, 2509, 2937, 2790, 321, 325, 3587, 514, 2995, 3837, 3596, 2231, 4096, 4411, 3986, 4002, 10, 1522, 3525, 2920, 1064, 1128, 1884, 3691, 512, 3131, 3976, 3156, 3892, 4043, 3561, 2205, 1472, 3964, 986, 4022, 650, 1390, 1849, 1852, 531, 3782, 519, 3813, 3536, 1721, 4243, 725, 573, 1590, 2964, 2052, 3049, 2830, 2692, 2974, 1877, 94, 2821, 2083, 2201, 3371, 132, 1980, 1974, 208, 3127, 3657, 659, 1344, 4119, 696, 1972, 793, 4357, 2708, 1552, 4237, 3292, 2639, 2568, 4499, 1263, 2380, 3107, 1548, 1438, 4565, 450, 2879, 1304, 2350, 3652, 3303, 1415, 4088, 4509, 1625, 1505, 1496, 2141, 990, 485, 3516, 1736, 1679, 244, 209, 2888, 847, 1318, 4231, 2463, 337, 4105, 3304, 791, 3878, 2096, 145, 1220, 884, 2421, 4222, 1319, 3718, 1193, 276, 538, 2544, 3033, 710, 3888, 1993, 1267, 2976, 3496, 1246, 0]);
    let n_v = ntru_v!(0);
    let m = create_rand_poly(n_v.w, n_v.p);

    // encryption
    let c = encryption(&m, pk, &n_v);
    println!("encryption done!");
    let result = decryption(c, sk, &n_v);
    for i in 0..result.len(){
        if result[i] != m[i]{
            println!("Keys doesnt work, but why?");
            println!("Result = {:?}", result);
            break;
        }
    }
    println!("Compare weight:");
    assert_eq!(weight(&result),weight(&m));
    println!("Compare degree");
    assert_eq!(deg(&result),deg(&m));
}
